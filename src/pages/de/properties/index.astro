---
import Base from "../../../layouts/BaseLayout.astro";
import PropertyCard from "../../../components/PropertyCard.astro";
import Breadcrumbs from "../../../components/Breadcrumbs.astro";
import { loadProps } from "../../../lib/loadProps";
const props = await loadProps('de');
const data = JSON.stringify(props);

// SEO-optimierte Title und Description
const seoTitle = `Immobilien · DE – Weib-Coding`;
const seoDescription = `Immobilien in Pattaya entdecken. Villen, Condos, Häuser zum Verkauf und zur Miete. Professionelle Beratung vor Ort.`;

const breadcrumbItems = [
  { label: 'Immobilien' }
];
---
<Base 
  lang="de" 
  title={seoTitle} 
  description={seoDescription}
  tags={['Immobilien', 'Pattaya', 'Villa', 'Condo', 'Haus', 'Verkauf', 'Miete']}
>
  <Breadcrumbs items={breadcrumbItems} locale="de" />
  <h1 class="text-2xl font-semibold mb-4" style="color: var(--color-text);">Immobilien</h1>

  <!-- Erweiterte Filter mit besseren Komponenten -->
  <div class="bg-white rounded-xl shadow-sm border p-6 mb-8">
    <h2 class="text-lg font-semibold mb-4">Immobilien filtern</h2>
    <form id="filters" class="grid md:grid-cols-5 gap-4">
      <div>
        <label for="min" class="block text-sm font-medium text-gray-700 mb-1">Preis min (THB)</label>
        <input class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" type="number" id="min" placeholder="z.B. 5000000" />
      </div>
      <div>
        <label for="max" class="block text-sm font-medium text-gray-700 mb-1">Preis max (THB)</label>
        <input class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" type="number" id="max" placeholder="z.B. 20000000" />
      </div>
      <div>
        <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Immobilientyp</label>
        <select class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="type">
          <option value="">Alle Typen</option>
          <option value="villa">Villa</option>
          <option value="condo">Condo</option>
          <option value="house">Haus</option>
          <option value="apartment">Apartment</option>
        </select>
      </div>
      <div>
        <label for="bed" class="block text-sm font-medium text-gray-700 mb-1">Schlafzimmer</label>
        <select class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="bed">
          <option value="">Alle</option>
          <option value="1">1+</option>
          <option value="2">2+</option>
          <option value="3">3+</option>
          <option value="4">4+</option>
          <option value="5">5+</option>
        </select>
      </div>
      <div>
        <label for="bath" class="block text-sm font-medium text-gray-700 mb-1">Badezimmer</label>
        <select class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="bath">
          <option value="">Alle</option>
          <option value="1">1+</option>
          <option value="2">2+</option>
          <option value="3">3+</option>
          <option value="4">4+</option>
        </select>
      </div>
    </form>
    <form id="filters-row2" class="grid md:grid-cols-4 gap-4 mt-4">
      <div>
        <label for="for" class="block text-sm font-medium text-gray-700 mb-1">Kauf/Miete</label>
        <select class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="for">
          <option value="">Alle</option>
          <option value="sale">Kauf</option>
          <option value="rent">Miete</option>
        </select>
      </div>
      <div>
        <label for="minsqm" class="block text-sm font-medium text-gray-700 mb-1">Wohnfläche min (m²)</label>
        <input class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" type="number" id="minsqm" placeholder="z.B. 50" />
      </div>
      <div>
        <label for="q" class="block text-sm font-medium text-gray-700 mb-1">Suche</label>
        <input 
          class="w-full rounded-lg px-3 py-2 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2" 
          type="search" 
          id="q" 
          placeholder="Ort, Features..."
          style="
            background-color: var(--input-bg);
            border: 1px solid var(--input-border);
            color: var(--color-text);
            --tw-ring-color: var(--color-primary);
          "
        />
      </div>
      <div class="flex items-end">
        <button 
          type="button" 
          id="clear-filters" 
          class="w-full px-4 py-2 rounded-lg transition-colors hover:opacity-80"
          style={{
            backgroundColor: 'var(--color-muted)',
            color: 'white'
          }}
        >
          Filter zurücksetzen
        </button>
      </div>
    </form>
    <div class="mt-4 flex justify-between items-center">
      <span id="result-count" class="text-sm" style="color: var(--color-muted);">{props.length} Immobilien gefunden</span>
      <button type="button" id="clear-filters" class="text-sm transition-colors hover:opacity-80" style="color: var(--color-primary);">Filter zurücksetzen</button>
    </div>
  </div>

  <div id="list" class="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
    {props.map(p => <PropertyCard client:load p={p} />)}
  </div>

       <script type="module">
         import Fuse from "https://cdn.jsdelivr.net/npm/fuse.js@7.0.0/dist/fuse.min.mjs";
         const data = {data};
         const listEl = document.getElementById('list');
         const resultCountEl = document.getElementById('result-count');
         const els = {
           min: document.getElementById('min'),
           max: document.getElementById('max'),
           type: document.getElementById('type'),
           bed: document.getElementById('bed'),
           bath: document.getElementById('bath'),
           for: document.getElementById('for'),
           minsqm: document.getElementById('minsqm'),
           q: document.getElementById('q')
         };
         const fuse = new Fuse(data, { keys: ['title','location','description','features'], threshold: 0.3 });

         const render = (items) => {
           listEl.innerHTML = items.map(p => `
             <article class="border rounded-xl overflow-hidden hover:shadow-lg transition-shadow">
               <a href="${p.url}" class="block">
                 <img src="${p.cover || ''}" alt="${p.title}" class="w-full aspect-[4/3] object-cover" loading="lazy" />
                 <div class="p-4">
                   <h3 class="font-semibold text-lg mb-2">${p.title}</h3>
                   <p class="text-sm text-gray-600 mb-2">${p.location || ''} · ${p.type} · ${p.bedrooms} BR</p>
                   <p class="text-xl font-bold text-blue-600">${new Intl.NumberFormat('de-DE').format(p.price_thb)} THB</p>
                   ${p.features && p.features.length > 0 ? `<div class="mt-2 flex flex-wrap gap-1">
                     ${p.features.slice(0, 3).map(f => `<span class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">${f}</span>`).join('')}
                   </div>` : ''}
                 </div>
               </a>
             </article>
           `).join('');
           
           // Update result count
           resultCountEl.textContent = `${items.length} Immobilien gefunden`;
         };

         const filter = () => {
           const min = parseInt(els.min.value || '0', 10);
           const max = parseInt(els.max.value || '0', 10);
           const type = els.type.value;
           const bed = parseInt(els.bed.value || '0', 10);
           const bath = parseInt(els.bath.value || '0', 10);
           const wantFor = els.for.value;
           const minsqm = parseInt(els.minsqm.value || '0', 10);
           const q = els.q.value.trim();

           let items = data.slice();
           if (min) items = items.filter(p => (p.price_thb || 0) >= min);
           if (max) items = items.filter(p => (p.price_thb || 0) <= max);
           if (type) items = items.filter(p => p.type === type);
           if (bed) items = items.filter(p => (p.bedrooms || 0) >= bed);
           if (bath) items = items.filter(p => (p.bathrooms || 0) >= bath);
           if (wantFor) items = items.filter(p => (p.for || 'sale') === wantFor);
           if (minsqm) items = items.filter(p => (p.living_sqm || 0) >= minsqm);
           if (q) items = fuse.search(q).map(r => r.item).filter(p => items.includes(p));

           render(items);
         };

         const clearFilters = () => {
           Object.values(els).forEach(el => el.value = '');
           render(data);
         };

         // Event listeners
         Object.values(els).forEach(el => el.addEventListener('input', filter));
         document.getElementById('clear-filters').addEventListener('click', clearFilters);
         
         // Initial render
         render(data);
       </script>
</Base>
